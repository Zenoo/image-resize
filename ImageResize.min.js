class ImageResize{constructor(e={}){this._parameters={source:null,keepAspectRatio:!0,maxWidth:e?null:50,maxHeight:e?null:50,width:null,height:null,...e,onResize:e.onResize?[e.onResize]:[]},this._parameters.source?(this._input=this._parameters.source instanceof Element?this._parameters.source:document.querySelector(this._parameters.source),this._input?"INPUT"==this._input.nodeName?this._input.classList.contains("slick-complete-input")?console.warn("ImageResize: The element has already been initialized."):(this._build(),this._listen()):console.warn("ImageResize: "+("string"==typeof target?"The selector `"+this._parameters.source+"` didn't match any input.":"The element you provided isn't an input.")):console.warn("ImageResize: "+("string"==typeof target?"The selector `"+this._parameters.source+"` didn't match any element.":"The element you provided was undefined"))):(this._build(),this._listen())}_build(){this._canvas=document.createElement("canvas")}_listen(){this._input&&this._input.addEventListener("change",()=>{const[e]=this._input.files;e.type.match(/image.*/)?this._process(e).then(e=>{for(const t of this._parameters.onResize)Reflect.apply(t,null,[e])}):console.warn("ImageResize: You tried to resize a non-image file.")})}_process(e){return new Promise(t=>{const s=new FileReader;s.addEventListener("load",a=>{if(e.name.endsWith(".svg")){const e=new Image;e.addEventListener("load",()=>{t(e)}),e.src=s.result}else{const s=new Image;s.addEventListener("load",()=>{let{width:a,height:i}=s;const r=a/i;null!==this._parameters.maxWidth&&a>this._parameters.maxWidth&&(a=this._parameters.maxWidth,this._parameters.keepAspectRatio&&(i=a/r)),null!==this._parameters.maxHeight&&i>this._parameters.maxHeight&&(i=this._parameters.maxHeight,this._parameters.keepAspectRatio&&(a=r*i)),null!==this._parameters.width&&a>this._parameters.width&&(a=this._parameters.width,this._parameters.keepAspectRatio&&(i=a/r)),null!==this._parameters.height&&i>this._parameters.height&&(i=this._parameters.height,this._parameters.keepAspectRatio&&(a=r*i)),this._canvas.width=a,this._canvas.height=i,this._canvas.getContext("2d").clearRect(0,0,this._canvas.width,this._canvas.height),this._canvas.getContext("2d").drawImage(s,0,0,a,i);const n=this._canvas.toDataURL("image/"+e.name.split(".").pop()),h=new Image;h.addEventListener("load",()=>{t(h)}),h.src=n}),s.src=a.target.result}}),s.readAsDataURL(e)})}process(e){return new Promise(t=>{let s=null;new Promise(a=>{e instanceof File?(s=e,t()):fetch(e).then(e=>e.blob()).then(e=>{e.lastModifiedDate=new Date,e.name="resizedImage"+e.type.split("/").pop(),s=e,a()})}).then(()=>{this._process(s).then(e=>{t(e)})})})}maxWidth(e){return this._parameters.maxWidth=e,this}maxheight(e){return this._parameters.maxheight=e,this}width(e){return this._parameters.width=e,this}height(e){return this._parameters.height=e,this}keepAspectRatio(e){return this._parameters.keepAspectRatio=e,this}}