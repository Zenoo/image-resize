class ImageResize{constructor(parameters){this._parameters={source:null,keepAspectRatio:!0,maxWidth:parameters?null:50,maxHeight:parameters?null:50,width:null,height:null,...parameters,onResize:parameters.onResize?[parameters.onResize]:[]},this._parameters.source?(this._input=this._parameters.source instanceof Element?this._parameters.source:document.querySelector(this._parameters.source),this._input?"INPUT"==this._input.nodeName?this._input.classList.contains("slick-complete-input")?console.warn("ImageResize: The element has already been initialized."):(this._build(),this._listen()):console.warn("ImageResize: "+("string"==typeof target?"The selector `"+this._parameters.source+"` didn't match any input.":"The element you provided isn't an input.")):console.warn("ImageResize: "+("string"==typeof target?"The selector `"+this._parameters.source+"` didn't match any element.":"The element you provided was undefined"))):(this._build(),this._listen())}_build(){this._canvas=document.createElement("canvas")}_listen(){this._input&&this._input.addEventListener("change",()=>{const[image]=this._input.files;image.type.match(/image.*/)?this._process(image).then(resizedImage=>{for(const callback of this._parameters.onResize)Reflect.apply(callback,null,[resizedImage])}):console.warn("ImageResize: You tried to resize a non-image file.")})}_process(file){return new Promise(resolve=>{const reader=new FileReader;reader.addEventListener("load",event=>{if(file.name.endsWith(".svg")){const unalteredSVG=new Image;unalteredSVG.addEventListener("load",()=>{resolve(unalteredSVG)}),unalteredSVG.src=reader.result}else{const image=new Image;image.addEventListener("load",()=>{let{width:width,height:height}=image;const ratio=width/height;null!==this._parameters.maxWidth&&width>this._parameters.maxWidth&&(width=this._parameters.maxWidth,this._parameters.keepAspectRatio&&(height=width/ratio)),null!==this._parameters.maxHeight&&height>this._parameters.maxHeight&&(height=this._parameters.maxHeight,this._parameters.keepAspectRatio&&(width=ratio*height)),null!==this._parameters.width&&width>this._parameters.width&&(width=this._parameters.width,this._parameters.keepAspectRatio&&(height=width/ratio)),null!==this._parameters.height&&height>this._parameters.height&&(height=this._parameters.height,this._parameters.keepAspectRatio&&(width=ratio*height)),this._canvas.width=width,this._canvas.height=height,this._canvas.getContext("2d").clearRect(0,0,this._canvas.width,this._canvas.height),this._canvas.getContext("2d").drawImage(image,0,0,width,height);const dataUrl=this._canvas.toDataURL("image/"+file.name.split(".").pop()),resizedImage=new Image;resizedImage.addEventListener("load",()=>{resolve(resizedImage)}),resizedImage.src=dataUrl}),image.src=event.target.result}}),reader.readAsDataURL(file)})}process(file){return new Promise(resolve=>{let image=null;new Promise(solve=>{file instanceof File?(image=file,resolve()):fetch(file).then(res=>res.blob()).then(blob=>{blob.lastModifiedDate=new Date,blob.name="resizedImage"+blob.type.split("/").pop(),image=blob,solve()})}).then(()=>{this._process(image).then(resizedImage=>{resolve(resizedImage)})})})}maxWidth(value){return this._parameters.maxWidth=value,this}maxheight(value){return this._parameters.maxheight=value,this}width(value){return this._parameters.width=value,this}height(value){return this._parameters.height=value,this}keepAspectRatio(value){return this._parameters.keepAspectRatio=value,this}}